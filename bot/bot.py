import logging  
import os  
import requests  
from aiogram import Bot, Dispatcher, types  
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  
from aiogram.filters import Command  
from aiogram import F  
from aiogram.fsm.storage.memory import MemoryStorage  
from dotenv import load_dotenv  
import asyncio  
  
load_dotenv()  
BOT_TOKEN = os.getenv("BOT_TOKEN")  
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8001")   
  
logging.basicConfig(level=logging.INFO)  
  
bot = Bot(token=BOT_TOKEN)  
dp = Dispatcher(storage=MemoryStorage())  
  
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[  
    [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]  
])  
  
@dp.message(Command("start"))  
async def start_handler(message: types.Message):  
    payload = {  
        "telegram_id": message.from_user.id,  
        "username": message.from_user.username or ""  
    }  
    try:  
        response = requests.post(  
            f"{BACKEND_URL}/register",  
            params=payload,  
            timeout=5  
        )  
        if response.status_code == 200:  
            await message.answer(  
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üëã\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",  
                reply_markup=main_menu_kb  
            )  
        else:  
            await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  
    except Exception as e:  
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  
  
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  
async def main_menu_handler(message: types.Message):  
    await message.answer(  
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n(–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏)",  
        reply_markup=main_menu_kb  
    )  
  
async def main():  
    await dp.start_polling(bot)  
  
if __name__ == "__main__":  
    asyncio.run(main())  